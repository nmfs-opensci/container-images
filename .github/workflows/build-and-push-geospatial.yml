name: Docker Image Build and Push Geospatial

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'action.yml'
      - .github/workflows/build-and-push-geospatial.yml
      - 'images/py-rocket-geospatial-qgis/**'
      - 'images/py-rocket-geospatial/**'
      - 'images/py-geospatial/**'

env:
  WATCHED_DIRECTORIES: |
    images/py-geospatial
    images/py-rocket-geospatial
    images/py-rocket-geospatial-qgis

jobs:
  find-changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.find-changes.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Find changed directories
        id: find-changes
        run: |
          # Prepare pattern for grep
          watched_dirs=$(echo "${WATCHED_DIRECTORIES}" | tr '\n' '|')

          # Get all changed paths
          all_changed_dirs=$(git diff --name-only HEAD^ HEAD | grep -E "^(${watched_dirs})" || true)

          echo "All changed candidate dirs: $all_changed_dirs"

          # Manually filter to only top-level watched directories
          dirs=$(echo "$all_changed_dirs" | while read -r path; do
            for watched in ${WATCHED_DIRECTORIES}; do
              if [[ "$path" == "$watched"* ]]; then
                echo "$watched"
              fi
            done
          done | sort -u)

          echo "Filtered watched dirs: $dirs"

          # Handle case of no dirs changed
          if [ -z "$dirs" ]; then
            echo "::set-output name=changed::[]"  # empty array
            exit 0
          fi

          # Convert to JSON for matrix
          matrix_dirs=$(echo "$dirs" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "::set-output name=changed::$matrix_dirs"
          
  build-py-geospatial:
    runs-on: ubuntu-latest
    needs: find-changes
    if: contains(fromJson(needs.find-changes.outputs.changed), 'images/py-geospatial')
    steps:
      - uses: actions/checkout@v3
      - name: Build py-geospatial
        uses: nmfs-opensci/container-images@main
        with:
          image_dir: images/py-geospatial
          image_name: container-images/py-geospatial
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build-py-rocket-geospatial:
    runs-on: ubuntu-latest
    needs: build-py-geospatial
    if: |
      always() &&
      contains(fromJson(needs.find-changes.outputs.changed), 'images/py-rocket-geospatial')
    steps:
      - uses: actions/checkout@v3
      - name: Build py-rocket-geospatial
        uses: nmfs-opensci/container-images@main
        with:
          image_dir: images/py-rocket-geospatial
          image_name: container-images/py-rocket-geospatial
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build-py-rocket-geospatial-qgis:
    runs-on: ubuntu-latest
    needs: build-py-rocket-geospatial
    if: |
      always() &&
      contains(fromJson(needs.find-changes.outputs.changed), 'images/py-rocket-geospatial-qgis')
    steps:
      - uses: actions/checkout@v3
      - name: Build py-rocket-geospatial-qgis
        uses: nmfs-opensci/container-images@main
        with:
          image_dir: images/py-rocket-geospatial-qgis
          image_name: container-images/py-rocket-geospatial-qgis
          github_token: ${{ secrets.GITHUB_TOKEN }}
